"""
RiceRocks. Very cool, addicting game!
How to play:
  - open codeskulptor.org
  - copy the entire code here and paste it in the left box
  - hit the run button and enjoy the game:
    - spacebar to shoot; up arrow to accelerate, release to slowly decelerate; left and right arrow to rotate counterclockwise and clockwise, respectively
    - asteroids are spawn randomly; the more you shoot them down, the faster they will move, so see if you can score for more than 400!
    - Stay focused and good luck!
"""

# import relevant modules
import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
lives = 0
time = 0
started = False

class ImageInfo:
    """Contains information of an image object."""
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self._center = center
        self._size = size
        self._radius = radius
        if lifespan:
            self._lifespan = lifespan
        else:
            self._lifespan = float('inf')
        self._animated = animated

    def get_center(self):
        return self._center

    def get_size(self):
        return self._size

    def get_radius(self):
        return self._radius

    def get_lifespan(self):
        return self._lifespan

    def get_animated(self):
        return self._animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2014.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 40)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
soundtrack.set_volume(0.4)
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(0.7)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# alternative upbeat soundtrack by composer and former IIPP student Emiel Stopler
# please do not redistribute without permission from Emiel at http://www.filmcomposer.nl
# soundtrack = simplegui.load_sound("https://storage.googleapis.com/codeskulptor-assets/ricerocks_theme.mp3")

# helper functions
def angle_to_vector(ang):
    """
    Inputs:
    - ang: angle formed by a unit vector and the horizontal axis.
    Outputs:
    - The x and y components of the unit vector.
    """
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    """
    Inputs:
    - p, q: two points in a 2D space.
    Outputs:
    - distance between p and q.
    """
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)

def my_key(key, key_dict):
    """
    Maps a key to its corresponding function and executes that function.
    Inputs:
    - key: a key to be pressed or released.
    - key_dict: a dictionary of keys and their corresponding functions.
    """
    for a_key, corresponding_func in key_dict.items():
        if key == simplegui.KEY_MAP[a_key]:
            corresponding_func()
            
def process_sprite_group(group, canvas):
    """
    Takes a group and a canvas and call the update
    and draw methods for each sprite in the group.
    Inputs:
    - group: a set of objects.
    - canvas: a canvas where all the drawing occurs.
    Outputs:
    - elements in group are updated via the update method in the Sprite class.
    - group can be mutated and have shorter length.
    """
    for sprite in set(group):
        sprite.draw(canvas)
        if sprite.update():
            group.remove(sprite)
        
def group_collide(group, other_object):
    """
    Determines if there is a collision between an object 
    and objects within a group, and give an explosion effect.
    Inputs:
    - group: set of objects (should be rocks).
    - other_object: another object (should be ship).
    Outputs:
    - is_collided: boolean determining if there is a collision.
    - group can be mutated and have shorter length.
    - explosion_group is mutated and have longer length.
    """
    is_collided = False
    
    # remove element that collides with other_object and create explosion image
    for element in set(group):
        if element.collide(other_object):
            is_collided = True
            an_explosion = Sprite(element.get_position(), [0, 0], 0, 0,
                           explosion_image, explosion_info, explosion_sound)
            explosion_group.add(an_explosion)
            group.remove(element)
        
    return is_collided
    
def group_group_collide(group1, group2):
    """ 
    Determines if there is a collision between objects 
    in one group and objects in another group.
    Inputs:
    - group1: set of objects (should be rocks).
    - group2: set of objects (should be missiles).
    Outputs:
    - num_collisions: number of collisions.
    - group1 and group2 can be mutated and have shorter length.
    """
    num_collisions = 0
    for thing in set(group1):
        if group_collide(group2, thing):
            num_collisions += 1
            group1.discard(thing) # don't want to raise an error
    return num_collisions
        

# define all classes
class Ship:
    """Contains information of a ship object."""
    def __init__(self, pos, vel, angle, image, info):
        self._pos = [pos[0],pos[1]]
        self._vel = [vel[0],vel[1]]
        self._thrust = False
        self._angle = angle
        self._angle_vel = 0
        self._image = image
        self._image_center = info.get_center()
        self._image_size = info.get_size()
        self._radius = info.get_radius()
        
    def get_position(self):
        return self._pos
    
    def get_radius(self):
        return self._radius
    
    def counterclockwise(self):
        """
        Sets angle velocity so the ship rotates counterclockwise 
        during interactions with keydown handler - right arrow.
        """
        self._angle_vel = - 0.1
            
    
    def clockwise(self):
        """
        Sets angle velocity so the ship rotates clockwise 
        during interactions with keydown handler - left arrow.
        """
        self._angle_vel = 0.1
        
    def stop(self):
        """
        Sets angle velocity so the ship stops during 
        interactions with keyup handler - left/right arrow.
        """
        self._angle_vel = 0
    
    def thruster(self):
        """
        Turns the thrusters on/off during interactions 
        with keyup handler - up arrow.
        """
        if not self._thrust:
            self._thrust = True  # turn on thrusters
            ship_thrust_sound.play()
        else:
            self._thrust = False # turn off thrusters
            ship_thrust_sound.rewind()
        
    def shoot(self):
        """
        Create a missile at the tip of the ship's canon during 
        interactions with keydown handler - space bar.
        """
        global a_missile
        
        # unit forward vector
        forward = angle_to_vector(self._angle)
        
        # calculate missile's position.
        # think of vector: missile_pos = ship's position + ship's poiting direction.
        # ship's pointing direction is controlled by the forward vector.
        # needs to scale forward vector by radius of the ship to make sure
        # missile comes out at the tip of the ship's canon.
        missile_pos       = [self._pos[0] + 40 * forward[0], 
                             self._pos[1] + 40 * forward[1]]
        
        # calculate missile's velocity.
        # missile_vel = ship's velocity + a multiple of ship's forward vector.
        # the multiplying constant controls how fast the missle should moving.
        missile_vel       = [self._vel[0] + 5 * forward[0],
                             self._vel[1] + 5 * forward[1]]
        
        # calculate missile's angle
        missile_ang       = self._angle
        
        # calculate missile's angular velocity. for missile, always 0
        missile_angle_vel = 0
        
        # create a missile
        a_missile = Sprite(missile_pos, missile_vel, missile_ang, missile_angle_vel,
                           missile_image, missile_info, missile_sound)
        missile_group.add(a_missile)
        
    def draw(self,canvas):
        """Draws the image of a ship, depending on whether thrusters are on or off."""
        if self._thrust:
            canvas.draw_image(self._image, [135, 45], self._image_size, self._pos, self._image_size, self._angle)
        else:
            canvas.draw_image(self._image, self._image_center, self._image_size, self._pos, self._image_size, self._angle)

    def update(self):
        """Updates the position, angle, and velocity of the ship."""
        # angle update
        self._angle  += self._angle_vel
        
        # position update. ship is screen wrapped
        self._pos[0] = (self._pos[0] + self._vel[0]) % WIDTH
        self._pos[1] = (self._pos[1] + self._vel[1]) % HEIGHT 
        
        # friction update
        c = 0.005 # friction constant
        self._vel[0] *= (1 - c)
        self._vel[1] *= (1 - c)
        
        # velocity update - acceleration in direction of forward vector.
        # forward is a unit vector, so need to multiply by some constant
        # to avoid accelerating too fast.
        forward = angle_to_vector(self._angle)
        if self._thrust:
            self._vel[0] += forward[0] * 0.08
            self._vel[1] += forward[1] * 0.08
    
class Sprite:
    """Contains information of a sprite object."""
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self._pos = [pos[0],pos[1]]
        self._vel = [vel[0],vel[1]]
        self._angle = ang
        self._angle_vel = ang_vel
        self._image = image
        self._image_center = info.get_center()
        self._image_size = info.get_size()
        self._radius = info.get_radius()
        self._lifespan = info.get_lifespan()
        self._animated = info.get_animated()
        self._age = 0
        if sound:
            sound.rewind()
            sound.play()
   
    def get_position(self):
        return self._pos
    
    def get_radius(self):
        return self._radius
    
    def draw(self, canvas):
        """Draws the image of a sprite or its explosion.""" 
        center = list(self._image_center)
        if self._animated:
            center[0]  = self._image_center[0] + (self._image_size[0] * self._age)
        canvas.draw_image(self._image, center, self._image_size, 
                              self._pos, self._image_size, self._angle)
                              
    def update(self):
        """Updates the position of a sprite."""
        self._angle  += self._angle_vel
        self._pos[0] = (self._pos[0] + self._vel[0]) % WIDTH
        self._pos[1] = (self._pos[1] + self._vel[1]) % HEIGHT
        
        self._age   += 1
        if self._age < self._lifespan: # keep the sprite
            return False
        else:                          # remove the sprite
            return True
        
        
    def collide(self, other_object):
        """
        Returns True or False depending on whether there is a collision 
        between a sprite and other_object.other_object could be a ship, 
        a missile, or a rock (but here, ignore rock-rock collision).
        """
        distance = dist(self.get_position(), other_object.get_position())
        if distance <= self.get_radius() + other_object.get_radius(): # collide
            return True
        else:
            return False
        
### EVENT HANDLERS
def click(pos):
    """
    Mouseclick handler that resets the UI and
    conditions whether spash image is drawn.
    """
    global started, lives, score
    
    center = [WIDTH / 2, HEIGHT / 2]
    size = splash_info.get_size()
    inwidth = (center[0] - size[0] / 2) < pos[0] < (center[0] + size[0] / 2)
    inheight = (center[1] - size[1] / 2) < pos[1] < (center[1] + size[1] / 2)
    if (not started) and inwidth and inheight:
        started = True
        lives   = 3
        score   = 0
        timer.start()
        soundtrack.play()

def draw(canvas):
    """ Draw handler that draws all the images on the canvas."""
    global time, lives, score, started, rock_group
    
    # animiate background
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), 
                      nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], 
                      [WIDTH, HEIGHT]) # comment it out to see something cool
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))

    # draw splash screen if not started
    if not started:
        canvas.draw_image(splash_image, splash_info.get_center(), 
                          splash_info.get_size(), [WIDTH / 2, HEIGHT / 2], 
                          splash_info.get_size())
    
    # draw lives remaining and scores
    canvas.draw_text('Lives', [30, 30], 25, 'White', 'monospace')
    canvas.draw_text(str(lives), [30, 55], 25, 'White', 'monospace')
    canvas.draw_text('Score', [WIDTH - 85, 30], 25, 'White' 'monospace')
    canvas.draw_text(str(score), [WIDTH - 85, 55], 25, 'White', 'monospace')
    
    # draw ship, set of rocks, and set of missiles
    my_ship.draw(canvas)
    my_ship.update()
    process_sprite_group(rock_group, canvas)
    process_sprite_group(missile_group, canvas)
    process_sprite_group(explosion_group, canvas)
    
    # missiles hits rocks event
    score += group_group_collide(missile_group, rock_group) * 10
    
    # ship collides with rock event
    if group_collide(rock_group, my_ship):
        lives -= 1
        
    # reset game if no more lives left
    if lives == 0:
        timer.stop()
        rock_group = set([])
        started    = False
        soundtrack.rewind()
        canvas.draw_text("I'VE FINALLY GRADUATED! CONGRATSSSS, HUY!",
                         [53, 590], 30, 'Pink')
        
def keydown(key):
    """Keydown handler that rotates the ship counterclockwise or clockwise.""" 
    
    # define a dictionary of keys and their corresponding methods
    key_dict = {'left': my_ship.counterclockwise, 'right': my_ship.clockwise, 
                'up': my_ship.thruster, 'space': my_ship.shoot}
    
    # execute the method corresponding to the key pressed
    my_key(key, key_dict)
        
def keyup(key):
    """Keyup handler that stops turning the ship, maintaining its direction."""
    
    # define a dictionary of keys and their corresponding methods
    key_dict = {'left': my_ship.stop, 'right': my_ship.stop, 'up': my_ship.thruster}
    
    # execute the method corresponding to the key released
    my_key(key, key_dict)
        
def rock_spawner():
    """Timer handler that spawns a rock."""
    
    # initialize parameters for a rock.
    # velocity is based on score to make game harder. also add
    # some numbers to avoid 0 velocity
    pos       = [random.randint(0, WIDTH), random.randint(0, HEIGHT)]
    angle     = 0
    angle_vel = random.randint(-5, 5) / 100.0 + 0.009
    vel       = [random.random() * random.choice([-1, 1]) * score * 0.03 + 0.01,
                 random.random() * random.choice([-1, 1]) * score * 0.03 + 0.01]
    
    # create a rock and add it to rock_group every time-interval passed.
    # limit to 12 rocks spawned at max.
    if len(rock_group) < 12:
        a_rock = Sprite(pos, vel, angle, angle_vel, asteroid_image, asteroid_info)
        # ignore rocks that spawned too close to the ship
        if dist(a_rock.get_position(), my_ship.get_position()) > 100:
            rock_group.add(a_rock)

# initialize frame
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# initialize ship, set of rocks, set of missiles, and set of explosions
my_ship         = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)
explosion_group = set([])
rock_group      = set([])
missile_group   = set([])

# create a timer and register handlers
timer = simplegui.create_timer(1000.0, rock_spawner)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.set_mouseclick_handler(click)

# get things rolling
frame.start()
